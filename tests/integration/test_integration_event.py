import cloudpassage
import datetime
import os
from cloudpassage.utility import Utility as utility

config_file_name = "portal.yaml.local"
tests_dir = os.path.abspath(os.path.join(os.path.dirname(__file__), "../"))
config_file = os.path.join(tests_dir, "configs/", config_file_name)

session_info = cloudpassage.ApiKeyManager(config_file=config_file)
key_id = session_info.key_id
secret_key = session_info.secret_key
api_hostname = session_info.api_hostname
api_port = session_info.api_port


class TestIntegrationEvent:
    def create_event_obj(self):
        session = cloudpassage.HaloSession(key_id, secret_key,
                                           api_host=api_hostname,
                                           api_port=api_port,
                                           integration_string="SDK-Smoke")
        return cloudpassage.Event(session)

    def test_instantiation(self):
        assert self.create_event_obj()

    def test_list_five_pages(self):
        event = self.create_event_obj()
        event_list = event.list_all(5)
        assert "id" in event_list[0]

    def test_windows(self):
        """This test attempts to get a list of events, search criteria
        being that they are generated by an agent running on a Windows
        workload.  If you don't have any events generated by Windows
        workloads, it will fail."""
        event = self.create_event_obj()
        event_list = event.list_all(2, server_platform="windows")
        for e in event_list:
            assert e["server_platform"] == "Windows"

    def test_one_day_ago_until_now(self):
        event = self.create_event_obj()
        until = utility.time_string_now()
        since = datetime.datetime.utcnow() - datetime.timedelta(days=1)
        event_list = event.list_all(10, since=since, until=until)
        assert "id" in event_list[0]

    def test_critical(self):
        event = self.create_event_obj()
        event_list = event.list_all(1, critical="true")
        for e in event_list:
            assert e["critical"] is True
